{"/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/test.js":"/* istanbul instrument in package npmtest_ember_one_way_controls */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/lib.npmtest_ember_one_way_controls.js":"/* istanbul instrument in package npmtest_ember_one_way_controls */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_one_way_controls = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_one_way_controls = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-one-way-controls && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_one_way_controls */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_one_way_controls\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_one_way_controls.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_one_way_controls.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_one_way_controls.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_one_way_controls.__dirname + '/lib.npmtest_ember_one_way_controls.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-one-way-controls'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-checkbox.js":"import Ember from 'ember';\nimport { invokeAction } from 'ember-invoke-action';\nimport DynamicAttributeBindings from '../-private/dynamic-attribute-bindings';\n\nconst {\n  Component,\n  get,\n  set\n} = Ember;\n\nconst OneWayCheckboxComponent = Component.extend(DynamicAttributeBindings, {\n  tagName: 'input',\n  type: 'checkbox',\n\n  NON_ATTRIBUTE_BOUND_PROPS: ['update'],\n\n  attributeBindings: [\n    'isChecked:checked',\n    'type',\n    'value'\n  ],\n\n  click(event) {\n    invokeAction(this, 'update', this.readDOMAttr('checked'), event);\n  },\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n\n    let value = get(this, 'paramChecked');\n    if (value === undefined) {\n      value = get(this, 'checked');\n    }\n\n    set(this, 'isChecked', value);\n  }\n});\n\nOneWayCheckboxComponent.reopenClass({\n  positionalParams: ['paramChecked']\n});\n\nexport default OneWayCheckboxComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-color.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'color'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-date.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'date'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-datetime-local.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'datetime-local'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-email.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'email'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-file.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'file'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-hidden.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'hidden'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-input.js":"import Ember from 'ember';\nimport { invokeAction } from 'ember-invoke-action';\nimport DynamicAttributeBindings from '../-private/dynamic-attribute-bindings';\n\nconst {\n  Component,\n  assert,\n  computed,\n  get,\n  isNone,\n  run: { schedule }\n} = Ember;\n\nconst FORBIDDEN_TYPES = ['checkbox', 'radio'];\n\nconst OneWayInputComponent = Component.extend(DynamicAttributeBindings, {\n  tagName: 'input',\n\n  attributeBindings: [\n    'type',\n    '_value:value'\n  ],\n\n  NON_ATTRIBUTE_BOUND_PROPS: [\n    'keyEvents',\n    'classNames',\n    'positionalParamValue',\n    'update'\n  ],\n\n  keyEvents: {\n    '13': 'onenter',\n    '27': 'onescape'\n  },\n\n  change(event) {\n    this._processNewValue(event.target.value);\n  },\n\n  input(event) {\n    this._processNewValue(event.target.value);\n  },\n\n  _processNewValue(value) {\n    if (get(this, '_value') !== value) {\n      invokeAction(this, 'update', value);\n    }\n\n    schedule('afterRender', this, '_syncValue');\n  },\n\n  _syncValue() {\n    if (this.isDestroyed || this.isDestroying) {\n      return;\n    }\n\n    let actualValue = get(this, '_value');\n    let renderedValue = this.readDOMAttr('value');\n\n    if (!isNone(actualValue) && !isNone(renderedValue) && actualValue.toString() !== renderedValue.toString()) {\n      let element = this.$();\n      let rawElement = element.get(0);\n\n      let start;\n      let end;\n\n      // gaurds because only text, search, url, tel and password support this\n      try {\n        start = rawElement.selectionStart;\n        end = rawElement.selectionEnd;\n      } catch(e) {\n        // no-op\n      }\n\n      element.val(actualValue);\n\n      try {\n        rawElement.setSelectionRange(start, end);\n      } catch(e) {\n        // no-op\n      }\n    }\n  },\n\n  keyUp(event) {\n    let method = get(this, `keyEvents.${event.keyCode}`);\n    if (method) {\n      invokeAction(this, method, event.target.value);\n    }\n  },\n\n  type: computed({\n    get() {\n      return 'text';\n    },\n\n    set(key, type) {\n      assert(`The {{one-way-input}} component does not support type=\"${type}\", use {{one-way-${type}}} instead.`, FORBIDDEN_TYPES.indexOf(type) === -1);\n      return type;\n    }\n  }),\n\n  _value: computed('positionalParamValue', 'value', {\n    get() {\n      let value = get(this, 'positionalParamValue');\n      if (value === undefined) {\n        value = get(this, 'value');\n      }\n\n      return value;\n    }\n  })\n});\n\nOneWayInputComponent.reopenClass({\n  positionalParams: ['positionalParamValue']\n});\n\nexport default OneWayInputComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-month.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'month'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-number.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'number'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-password.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'password'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-radio.js":"import Ember from 'ember';\nimport { invokeAction } from 'ember-invoke-action';\nimport DynamicAttributeBindings from '../-private/dynamic-attribute-bindings';\n\nconst {\n  Component,\n  computed,\n  get,\n  set\n} = Ember;\n\nconst OneWayRadioComponent = Component.extend(DynamicAttributeBindings, {\n  tagName: 'input',\n  type: 'radio',\n\n  NON_ATTRIBUTE_BOUND_PROPS: [\n    'update',\n    'option',\n    'value'\n  ],\n\n  attributeBindings: [\n    'checked',\n    'option:value',\n    'type'\n  ],\n\n  checked: computed('_value', 'option', function() {\n    return get(this, '_value') === get(this, 'option');\n  }),\n\n  click() {\n    invokeAction(this, 'update', get(this, 'option'));\n  },\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n\n    let value = get(this, 'paramValue');\n    if (value === undefined) {\n      value = get(this, 'value');\n    }\n\n    set(this, '_value', value);\n  }\n});\n\nOneWayRadioComponent.reopenClass({\n  positionalParams: ['paramValue']\n});\n\nexport default OneWayRadioComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-range.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'range'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-search.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'search'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-select.js":"import Ember from 'ember';\nimport layout from '../templates/components/one-way-select';\nimport DynamicAttributeBindings from '../-private/dynamic-attribute-bindings';\n\nimport { invokeAction } from 'ember-invoke-action';\n\nconst {\n  A: emberArray,\n  Component,\n  computed,\n  computed: { alias, empty, not, or },\n  Object: EmberObject,\n  get,\n  isArray,\n  isBlank,\n  isNone,\n  isPresent,\n  set,\n  String: { w }\n} = Ember;\n\nconst OneWaySelectComponent = Component.extend(DynamicAttributeBindings, {\n  layout,\n  tagName: 'select',\n\n  NON_ATTRIBUTE_BOUND_PROPS: [\n    'value',\n    'update',\n    'options',\n    'paramValue',\n    'prompt',\n    'promptIsSelectable',\n    'includeBlank',\n    'optionValuePath',\n    'optionLabelPath',\n    'optionComponent',\n    'groupLabelPath'\n  ],\n\n  attributeBindings: [\n    'multiple'\n  ],\n\n  didReceiveAttrs() {\n    this._super(...arguments);\n\n    let value = get(this, 'paramValue');\n    if (value === undefined) {\n      value = get(this, 'value');\n    }\n\n    set(this, 'selectedValue', value);\n\n    let options = get(this, 'options');\n    if (typeof options === 'string') {\n      options = w(options);\n    }\n\n    let firstOption = get(emberArray(options), 'firstObject');\n    if (firstOption &&\n        isPresent(get(firstOption, 'groupName')) &&\n        isArray(get(firstOption, 'options'))) {\n      set(this, 'optionsArePreGrouped', true);\n    }\n\n    if (isBlank(get(this, 'promptIsSelectable'))) {\n      set(this, 'promptIsSelectable', false);\n    }\n\n    set(this, 'options', emberArray(options));\n  },\n\n  nothingSelected: empty('selectedValue'),\n  promptIsDisabled: not('promptIsSelectable'),\n  hasGrouping: or('optionsArePreGrouped', 'groupLabelPath'),\n  computedOptionValuePath: or('optionValuePath', 'optionTargetPath'),\n\n  optionGroups: computed('options.[]', function() {\n    let groupLabelPath = get(this, 'groupLabelPath');\n    let options = get(this, 'options');\n    let groups = emberArray();\n\n    if (!groupLabelPath) {\n      return options;\n    }\n\n    options.forEach((item) => {\n      let label = get(item, groupLabelPath);\n\n      if (label) {\n        let group = groups.findBy('groupName', label);\n\n        if (group == null) {\n          group = EmberObject.create({\n            groupName: label,\n            options:   emberArray()\n          });\n\n          groups.pushObject(group);\n        }\n\n        get(group, 'options').pushObject(item);\n      } else {\n        groups.pushObject(item);\n      }\n    });\n\n    return groups;\n  }),\n\n  change() {\n    let value;\n\n    if (get(this, 'multiple') === true) {\n      value = this._selectedMultiple();\n    } else {\n      value = this._selectedSingle();\n    }\n\n    invokeAction(this, 'update', value);\n  },\n\n  prompt: alias('includeBlank'),\n\n  _selectedMultiple() {\n    let selectedValues = this.$().val() || [];\n\n    return selectedValues.map((selectedValue) => {\n      return this._findOption(selectedValue);\n    });\n  },\n\n  _selectedSingle() {\n    let selectedValue = this.$().val();\n    return this._findOption(selectedValue);\n  },\n\n  _findOption(value) {\n    let options = get(this, 'options');\n    let optionValuePath = get(this, 'computedOptionValuePath');\n    let optionTargetPath = get(this, 'optionTargetPath');\n    let optionsArePreGrouped = get(this, 'optionsArePreGrouped');\n\n    let findOption = (item) => {\n      if (optionValuePath) {\n        return `${get(item, optionValuePath)}` === value;\n      } else {\n        return `${item}` === value;\n      }\n    };\n\n    let foundOption;\n    if (optionsArePreGrouped) {\n      foundOption = options.reduce((found, group) => {\n        return found || get(group, 'options').find(findOption);\n      }, undefined);\n    } else {\n      foundOption = options.find(findOption);\n    }\n\n    if (optionTargetPath && !isNone(foundOption)) {\n      return get(foundOption, optionTargetPath);\n    } else {\n      return foundOption;\n    }\n  }\n});\n\nOneWaySelectComponent.reopenClass({\n  positionalParams: ['paramValue']\n});\n\nexport default OneWaySelectComponent;\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-tel.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'tel'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-textarea.js":"import OneWayInputComponent from './one-way-input';\n\nexport default OneWayInputComponent.extend({\n  tagName: 'textarea',\n\n  init() {\n    this._super(...arguments);\n\n    // We need to unset type, otherwise it will try to set it\n    // on the element, which results in an error on textarea.\n    this.type = undefined;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-text.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'text'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-time.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'time'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-url.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'url'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-week.js":"import OneWayInput from './one-way-input';\n\nexport default OneWayInput.extend({\n  type: 'week'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/-private/dynamic-attribute-bindings.js":"import Ember from 'ember';\n\nconst { Mixin, set } = Ember;\n\nexport default Mixin.create({\n  NON_ATTRIBUTE_BOUND_PROPS: ['class', 'classNames'],\n  concatenatedProperties: ['NON_ATTRIBUTE_BOUND_PROPS'],\n  init() {\n    this._super(...arguments);\n\n    let newAttributeBindings = [];\n    for (let key in this.attrs) {\n      if (this.NON_ATTRIBUTE_BOUND_PROPS.indexOf(key) === -1 && this.attributeBindings.indexOf(key) === -1) {\n        newAttributeBindings.push(key);\n      }\n    }\n\n    set(this, 'attributeBindings', this.attributeBindings.concat(newAttributeBindings));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-checkbox.js":"export { default } from 'ember-one-way-controls/components/one-way-checkbox';","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-color.js":"export { default } from 'ember-one-way-controls/components/one-way-color';","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-date.js":"export { default } from 'ember-one-way-controls/components/one-way-date';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-datetime-local.js":"export { default } from 'ember-one-way-controls/components/one-way-datetime-local';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-email.js":"export { default } from 'ember-one-way-controls/components/one-way-email';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-file.js":"export { default } from 'ember-one-way-controls/components/one-way-file';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-hidden.js":"export { default } from 'ember-one-way-controls/components/one-way-hidden';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-input.js":"export { default } from 'ember-one-way-controls/components/one-way-input';","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-month.js":"export { default } from 'ember-one-way-controls/components/one-way-month';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-number.js":"export { default } from 'ember-one-way-controls/components/one-way-number';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-password.js":"export { default } from 'ember-one-way-controls/components/one-way-password';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-radio.js":"export { default } from 'ember-one-way-controls/components/one-way-radio';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-range.js":"export { default } from 'ember-one-way-controls/components/one-way-range';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-search.js":"export { default } from 'ember-one-way-controls/components/one-way-search';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-select.js":"export { default } from 'ember-one-way-controls/components/one-way-select';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-tel.js":"export { default } from 'ember-one-way-controls/components/one-way-tel';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-textarea.js":"export { default } from 'ember-one-way-controls/components/one-way-textarea';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-text.js":"export { default } from 'ember-one-way-controls/components/one-way-text';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-time.js":"export { default } from 'ember-one-way-controls/components/one-way-time';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-url.js":"export { default } from 'ember-one-way-controls/components/one-way-url';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-week.js":"export { default } from 'ember-one-way-controls/components/one-way-week';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/components/one-way-select/option.js":"import Ember from 'ember';\nimport layout from '../../templates/components/one-way-select/option';\n\nconst {\n  Component\n} = Ember;\n\nexport default Component.extend({\n  layout,\n  tagName: ''\n});\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/addon/helpers/one-way-select/contains.js":"import Ember from 'ember';\n\nconst {\n  A: emberArray,\n  Helper,\n  isArray,\n  isPresent,\n  get\n} = Ember;\n\nexport function contains([haystack, needle, valuePath, targetPath]) {\n  if (isArray(haystack)) {\n    haystack = emberArray(haystack);\n\n    if (valuePath) {\n      haystack = targetPath ? haystack : haystack.mapBy(valuePath);\n      return emberArray(haystack).includes(get(needle, valuePath));\n    } else {\n      return haystack.includes(needle);\n    }\n  } else {\n    if (valuePath && isPresent(haystack) && isPresent(needle)) {\n      haystack = targetPath ? haystack : get(haystack, valuePath);\n      return haystack === get(needle, valuePath);\n    } else {\n      return haystack === needle;\n    }\n  }\n}\n\nexport default Helper.helper(contains);\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/components/one-way-select/option.js":"export { default } from 'ember-one-way-controls/components/one-way-select/option';\n","/home/travis/build/npmtest/node-npmtest-ember-one-way-controls/node_modules/ember-one-way-controls/app/helpers/one-way-select/contains.js":"export { default, contains } from 'ember-one-way-controls/helpers/one-way-select/contains';\n"}